apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    pipeline.openshift.io/type: kubernetes
  name: myapp-ci-pipeline
  namespace: myapp-ci
spec:
  resources:
  - name: intermediate-image
    type: image
  - name: runtime-image
    type: image
  params:
  - name: STORAGE_DRIVER            # Used for the build step to tell Buildah how to store images
    type: string
    default: vfs
  - name: source-git-url            # Application source code git url
    type: string
  - name: source-git-revision       # Application source code git branch or tag
    type: string
  - name: gitrepository_fullname    # Application source code git repository full name
    type: string
  - name: commit_prior_revision     # Application source code git commit id (most recent commit) - Only used when triggered by a Tekton trigger
    type: string
  - name: commit_date               # Application source code git commit date - Only used when triggered by a Tekton trigger
    type: string
  - name: commit_author             # Application source code git commit author - Only used when triggered by a Tekton trigger
    type: string
  - name: openshift_app_name        # OpenShift project name
    type: string
  - name: runtime_image_name        # OpenShift imagestream name
    type: string
  - name: runtime_base_image        # Input base image into which the build jar file is injected
    type: string
  - name: myapp-cd-git-url          # Continuous delivery git repository url
    type: string
  - name: repo_type
    type: string
  - name: my-app-cd-git-repo-name   # Continuous delivery git repository name
    type: string
  - name: my-app-cd-git-repo-path-to-content-development    # Path to the development assets in the continuous delivery git repository
    type: string
  - name: my-app-cd-git-repo-path-to-content-qa             # Path to the qa assets in the continuous delivery git repository
    type: string
  - name: my-app-cd-git-commit-comment-dev  # Comment to be applied to the cd git commit when updating the Kustomize files
    type: string
  - name: my-app-cd-git-commit-comment-qa   # Comment to be applied to the cd git commit when updating the Kustomize files
    type: string
  - name: my-app-cd-git-repo-branch-qa      # Branch for commit of kustomization change for QA updates
    type: string
  - name: my-app-cd-git-target-branch-pr    # Target branch for a pull request to merge changes from an environment specific 'feature' branch
    type: string
  - name: my-app-cd-git-user-name           # Continuous delivery git repository update user - username
    type: string
  - name: my-app-cd-git-user-email          # Continuous delivery git repository update user - email
    type: string
  - name: acs_central_endpoint              # Advanced Cluster Security endpoint
    type: string
  - name: acs_api_token                     # Advanced Cluster Security access token secret
    type: string
  - name: roxctl-output-format              # Advanced Cluster Security image scan output format
    type: string
  - name: recursive-search                  # Search the subdirectories for deployment resources
    type: string
  - name: quay-io-account                   # Quay.io account name
    type: string
  - name: quay-io-repository                # Quay.io repository name
    type: string
  - name: quay-io-image-tag-name            # Quay.io repository image tag
    type: string
    default: "latest"
  - name: production-event-listener-route   # Route for the curl command to spoof the quay webook when using demolab
    type: string
  - name: demolab                           # Indication of whether demolab is being used 'yes or no'
    type: string
# argocd parameters
# argocd development application name
  - name: argocd-project-name-development
    type: string
  - name: argocd-revision
    type: string
  - name: argocd-flags
    type: string
  - name: argocd-version
    type: string
  tasks:
##------------------------------------------------------------------
# Git clone source code task
##------------------------------------------------------------------
  - name: git-clone-source
    params:
    - name: url
      value: $(params.source-git-url)
    - name: revision
      value: $(params.source-git-revision)
    - name: verbose
      value: 'false'
    - name: subdirectory
      value: source
    taskRef:
      kind: ClusterTask
      name:  git-clone
    workspaces:
    - name: output
      workspace: files
##------------------------------------------------------------------
# Build application
##------------------------------------------------------------------
  - name: build
    params:
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    resources:
      outputs:
      - name: intermediate-image
        resource: intermediate-image
    taskRef:
      kind: Task
      name: build
    runAfter:
    - git-clone-source
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Create the runtime image from a base container image and
# deployable asset extracted from the builder container image.
##------------------------------------------------------------------
  - name: create-runtime-image
    params:
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: gitrepository_url
      value: $(params.source-git-url)
    - name: gitrepository_fullname
      value: $(params.gitrepository_fullname)
    - name: commit_prior_revision
      value: $(params.commit_prior_revision)
    - name: commit_reference_branch
      value: $(params.source-git-revision)
    - name: commit_date
      value: $(params.commit_date)
    - name: commit_author
      value: $(params.commit_author)
    - name: runtime_image_name
      value: $(params.runtime_image_name)
    - name: openshift_app_name
      value: $(params.openshift_app_name)
    - name: runtime_base_image
      value: $(params.runtime_base_image)
    - name: sourceCommitTag
      value: "$(tasks.git-clone-source.results.commit)"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: pipelineName
      value: $(context.pipeline.name)
    resources:
      inputs:
      - name: intermediate-image
        resource: intermediate-image
      outputs:
      - name: runtime-image
        resource: runtime-image
    taskRef:
      kind: Task
      name: create-runtime-image
    runAfter:
    - build
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Clone the cd repository and update the kustomization file for the
# development environment to refer to the new tagged image.
##------------------------------------------------------------------
  - name: update-and-commit-kustomization-file-dev
    params:
    - name: GIT_URL
      value: $(params.repo_type)/$(params.myapp-cd-git-url)
    - name: GIT_REPO_NAME
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_BRANCH
      value: "main"
    - name: GIT_PATH_TO_CONTENT
      value: $(params.my-app-cd-git-repo-path-to-content-development)
    - name: GIT_USER_NAME
      value: $(params.my-app-cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.my-app-cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.my-app-cd-git-commit-comment-dev)
    - name: IMAGE
      value: $(tasks.create-runtime-image.results.new-image-repo-location)
    - name: LOCATION
      value: "dev"
    taskRef:
      kind: Task
      name: update-and-commit-kustomization-file
    runAfter:
    - create-runtime-image
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Iniitate the ArgoCD sync operation for the development environment
##------------------------------------------------------------------
  - name: sync-argocd-for-development
    params:
    - name: application-name
      value: $(params.argocd-project-name-development)
    - name: revision
      value: $(params.argocd-revision)
    - name: flags
      value: $(params.argocd-flags)
    - name: argocd-version
      value: $(params.argocd-version)
    taskRef:
      kind: ClusterTask
      name: argocd-task-sync-and-wait
    runAfter:
    - update-and-commit-kustomization-file-dev
    workspaces:
    - name: files
      workspace: files

##------------------------------------------------------------------
# Perform image build check
##------------------------------------------------------------------
  - name: image-build-check
    params:
    - name: acs_central_endpoint
      value: $(params.acs_central_endpoint)
    - name: acs_api_token
      value: $(params.acs_api_token)
    - name: public-url
      value: $(tasks.create-runtime-image.results.new-image-repo-location)
    - name: roxctl-output-format
      value: $(params.roxctl-output-format)
    taskRef:
      kind: Task
      name: acs-image-build-check
    runAfter:
    - create-runtime-image
##------------------------------------------------------------------
# Push the new runtime image to quay.io
##------------------------------------------------------------------
  - name: push-image-to-quay
    params:
      - name: quay-io-account
        value: $(params.quay-io-account)
      - name: quay-io-repository
        value: $(params.quay-io-repository)
      - name: quay-io-image-tag-name
        value: $(tasks.create-runtime-image.results.new-tag)
      - name: image-stream-location
        value: $(tasks.create-runtime-image.results.new-image-repo-location)
      - name: STORAGE_DRIVER
        value: $(params.STORAGE_DRIVER)
    taskRef:
      kind: Task
      name: push-image-to-quay
    when:
    - input: "$(tasks.image-build-check.results.scan-result)"
      operator: in
      values:
      - "pass"
    runAfter:
      - image-build-check
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Pretend to the be quay.io webhook reacting to the push of the image
# to quay by calling the route of the event listener associated with
# the initiation of the production git cd instance update.
##------------------------------------------------------------------
  - name: dl-quay-webhook-trigger
    params:
      - name: quay-io-account
        value: $(params.quay-io-account)
      - name: quay-io-repository
        value: $(params.quay-io-repository)
      - name: tag
        value: $(tasks.create-runtime-image.results.new-tag)
      - name: production-event-listener-route
        value: $(params.production-event-listener-route)
    taskRef:
      kind: Task
      name: dl-quay-webhook-trigger
    when:
    - input: "$(params.demolab)"
      operator: in
      values:
      - "yes"
    - input: "$(tasks.image-build-check.results.scan-result)"
      operator: in
      values:
      - "pass"
    runAfter:
      - push-image-to-quay
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Clone the cd repository and update the kustomization file for the
# qa environment to refer to the new tagged image.
##------------------------------------------------------------------
  - name: update-and-commit-kustomization-file-qa
    params:
    - name: GIT_URL
      value: $(params.repo_type)/$(params.myapp-cd-git-url)
    - name: GIT_REPO_NAME
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_BRANCH
      value: $(params.my-app-cd-git-repo-branch-qa)
    - name: GIT_PR_TARGET_BRANCH
      value: $(params.my-app-cd-git-target-branch-pr)
    - name: GIT_PATH_TO_CONTENT
      value: $(params.my-app-cd-git-repo-path-to-content-qa)
    - name: GIT_USER_NAME
      value: $(params.my-app-cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.my-app-cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.my-app-cd-git-commit-comment-qa)
    - name: IMAGE
      value: $(tasks.create-runtime-image.results.new-image-repo-location)
      # value: $(tasks.push-image-to-quay.results.quay-image-repo-location)
    - name: LOCATION
      value: "qa"
    taskRef:
      kind: Task
      name: update-and-commit-kustomization-file
    runAfter:
      # - push-image-to-quay
      - image-build-check
    when:
    - input: "$(tasks.image-build-check.results.scan-result)"
      operator: in
      values:
      - "pass"
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Add commit status to QA branch
##------------------------------------------------------------------
  - name: set-commit-status-qa-branch-pending
    params:
    - name: GIT_REPO
      value: $(params.myapp-cd-git-url)
    - name: REPO
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_TOKEN_SECRET_NAME
      value: github-access-token
    - name: GIT_TOKEN_SECRET_KEY
      value: token
    - name: COMMIT_SHA
      value: $(tasks.update-and-commit-kustomization-file-qa.results.commit-id)
    - name: DESCRIPTION
      value: "Pending status on commit to qa-ready"
    - name: CONTEXT
      value: "continuous-integration/Tekton"
    - name: STATE
      value: "pending"
    taskRef:
      kind: Task
      name: set-commit-status
    runAfter:
      - update-and-commit-kustomization-file-qa
##------------------------------------------------------------------
# Git clone deployment assets task (qa-branch)
##------------------------------------------------------------------
  - name: git-clone-resources-cd-qa-branch
    params:
    - name: url
      value: https://$(params.repo_type)/$(params.myapp-cd-git-url).git
    - name: revision
      value: $(params.my-app-cd-git-repo-branch-qa)
    - name: verbose
      value: 'false'
    taskRef:
      kind: ClusterTask
      name:  git-clone
    runAfter:
    - set-commit-status-qa-branch-pending
    workspaces:
    - name: output
      workspace: resources
##------------------------------------------------------------------
# Process kustomization file to generate deployment resources that
# will be used on the QA branch
##------------------------------------------------------------------
  - name: configure-deployment-assets
    params:
    - name: subdirectory
      value: $(params.my-app-cd-git-repo-path-to-content-qa)
    taskRef:
      kind: Task
      name: configure-deployment-assets
    runAfter:
    - git-clone-resources-cd-qa-branch
    workspaces:
    - name: files
      workspace: resources
##------------------------------------------------------------------
# Perform resource deployment check on files of interest
##------------------------------------------------------------------
  - name: resource-deployment-check
    params:
    - name: acs_central_endpoint
      value: $(params.acs_central_endpoint)
    - name: acs_api_token
      value: $(params.acs_api_token)
    - name: source_location
      value: $(params.my-app-cd-git-repo-path-to-content-qa)
    - name: recursive-search
      value: $(params.recursive-search)
    - name: roxctl-output-format
      value: $(params.roxctl-output-format)
    taskRef:
      kind: Task
      name: acs-deployment-check
    workspaces:
    - name: files
      workspace: resources
    runAfter:
    - configure-deployment-assets
##------------------------------------------------------------------
# Add commit status to QA branch if the resource deployment check
# is successful
##------------------------------------------------------------------
  - name: set-commit-status-qa-branch-success
    params:
    - name: GIT_REPO
      value: $(params.myapp-cd-git-url)
    - name: REPO
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_TOKEN_SECRET_NAME
      value: github-access-token
    - name: GIT_TOKEN_SECRET_KEY
      value: token
    - name: COMMIT_SHA
      value: $(tasks.update-and-commit-kustomization-file-qa.results.commit-id)
    - name: DESCRIPTION
      value: "Success status on commit to qa-ready"
    - name: CONTEXT
      value: "continuous-integration/Tekton"
    - name: STATE
      value: "success"
    taskRef:
      kind: Task
      name: set-commit-status
    when:
    - input: "$(tasks.resource-deployment-check.results.scan-result)"
      operator: in
      values:
      - "pass"
    runAfter:
      - resource-deployment-check
##------------------------------------------------------------------
# Workspace definition.
##------------------------------------------------------------------
  workspaces:
  - name: files
  - name: resources
