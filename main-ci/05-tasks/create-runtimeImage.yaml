apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-runtime-image
spec:
  params:
    - name: TLSVERIFY
      type: string
      default: 'false'
    - name: STORAGE_DRIVER
      type: string
    - name: gitrepository_url
      type: string
    - name: gitrepository_fullname
      type: string
    - name: commit_prior_revision
      type: string
    - name: commit_reference_branch
      type: string
    - name: commit_date
      type: string
    - name: commit_author
      type: string
    - name: runtime_image_name
      type: string
    - name: openshift_app_name
      type: string
    - name: runtime_base_image
      type: string
    - name: sourceCommitTag
      type: string
    - name: pipelineName
      type: string
    - name: pipelineRunName
      type: string
    - name: intermediate-image
      type: string
    - name: runtime-image
      type: string
  results:
    - name: new-image-repo-location
    - name: new-tag
  steps:
    - name: gen-binary-extraction-dockerfile
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "FROM localhost/$(params.intermediate-image) as intermediate-image" > ext-dockerfile.gen
          echo "FROM $(params.runtime_base_image) as runtime-image" >> ext-dockerfile.gen
          echo "COPY --from=intermediate-image /home/maven/target/liberty-rest-app.war /config/apps/liberty-rest-app.war" >> ext-dockerfile.gen
          echo "COPY --from=intermediate-image /home/maven/target/server.xml /config/server.xml" >> ext-dockerfile.gen
          echo "LABEL github.repository.url=\"$(params.gitrepository_url)\" \\" >> ext-dockerfile.gen
          echo "github.repository.fullname=\"$(params.gitrepository_fullname)\" \\" >> ext-dockerfile.gen
          echo "github.commit.ref=\"$(params.commit_reference_branch)\" \\" >> ext-dockerfile.gen
          echo "github.commit.id=\"$(params.sourceCommitTag)\" \\" >> ext-dockerfile.gen
          echo "github.commit.date=\"$(params.commit_date)\" \\" >> ext-dockerfile.gen
          echo "github.commit_author=\"$(params.commit_author)\" \\" >> ext-dockerfile.gen
          echo "pipeline.name=\"$(params.pipelineName)\" \\" >> ext-dockerfile.gen
          echo "pipeline.run=\"$(params.pipelineRunName)\" \\" >> ext-dockerfile.gen
          echo "------------------------------"
          cat ext-dockerfile.gen
          echo "------------------------------"
      image: image-registry.openshift-image-registry.svc:5000/myapp-ci/s2i-rhel-8:latest
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: extract-built-object
      command:
        - buildah
        - bud
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--storage-driver=$(params.STORAGE_DRIVER)'
        - '--layers'
        - '-f'
        - '/env-params/ext-dockerfile.gen'
        - '--root'
        - '/files/buildah-containers'
        - '-t'
        - $(params.runtime-image)
        - .
      image: image-registry.openshift-image-registry.svc:5000/myapp-ci/buildah:latest
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate-tag-push-to-ocp
      script: >-
        #!/usr/bin/env bash

        set +x

        var1=$(params.sourceCommitTag)

        echo $var1

 storage       var2=${var1:0:4}

        var3=$(params.pipelineRunName)

        var4=${var3:${#var3}-5:${#var3}}

        tag=$var2-$var4

        echo $tag

        echo -n $tag >  $(results.new-tag.path)

        buildah push --storage-driver=$(params.STORAGE_DRIVER) \

        --tls-verify=$(params.TLSVERIFY) --root /files/buildah-containers \

        $(params.runtime-image) \

        docker://$(params.runtime-image):$tag

      image: image-registry.openshift-image-registry.svc:5000/myapp-ci/buildah:latest
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      resources: {}
    - name: get-image-repository-url
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          export TAG=$(cat $(results.new-tag.path))

          echo $TAG

          oc project $(params.openshift_app_name)
          oc get is/$(params.runtime_image_name) -o jsonpath='{.status.dockerImageRepository}{":"}'$TAG > $(results.new-image-repo-location.path)

          echo -------------------------------------
          cat $(results.new-image-repo-location.path)

      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
# Changes for skylake
      securityContext:
        capabilities:
          add: ["SETFCAP"]
  volumes:
    - emptyDir: {}
      name: envparams
    - emptyDir: {}
      name: gen-source
  workspaces:
  - name: files
    mountPath: /files
